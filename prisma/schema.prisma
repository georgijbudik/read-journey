generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String     @unique
  password  String?
  image     String?
  token     String
  userbooks Userbook[]
  accounts  Account[]
  sessions  Session[]

  @@map("users")
}

model Book {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  author     String
  imageUrl   String
  totalPages Int
  recommend  Boolean

  @@map("books")
}

model Userbook {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  author     String
  imageUrl   String
  totalPages Int
  status     String
  userId     String?    @db.ObjectId
  user       User?      @relation(fields: [userId], references: [id])
  // progress   Progress[]

  @@map("userbooks")
}

// model Progress {
//   id            String    @id @default(auto()) @map("_id") @db.ObjectId
//   startPage     Int
//   startReading  DateTime  @default(now())
//   finishPage    Int?
//   finishReading DateTime?
//   speed         Int?
//   status        String
//   userbook      Userbook  @relation(fields: [userbookId], references: [id])
//   userbookId    String    @db.ObjectId

//   @@map("progresses")
// }

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
